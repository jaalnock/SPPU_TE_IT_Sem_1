#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];
int in = 0, out = 0;

sem_t empty, full;    // Counting semaphores
pthread_mutex_t mutex; // Mutex for critical section

void *producer(void *arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        item = i + 1;  // Produce an item

        sem_wait(&empty);          // Wait if buffer is full
        pthread_mutex_lock(&mutex); // Lock buffer access

        // Add item to buffer
        buffer[in] = item;
        printf("Producer produced: %d\n", item);
        in = (in + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex); // Unlock buffer access
        sem_post(&full);              // Signal that buffer has a new item

        sleep(1); // Simulate time taken to produce an item
    }
    return NULL;
}

void *consumer(void *arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        sem_wait(&full);              // Wait if buffer is empty
        pthread_mutex_lock(&mutex);   // Lock buffer access

        // Remove item from buffer
        item = buffer[out];
        printf("Consumer consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex); // Unlock buffer access
        sem_post(&empty);             // Signal that buffer has an empty slot

        sleep(1); // Simulate time taken to consume an item
    }
    return NULL;
}

int main() {
    pthread_t prodThread, consThread;

    // Initialize semaphores and mutex
    sem_init(&empty, 0, BUFFER_SIZE); // Buffer is initially empty
    sem_init(&full, 0, 0);            // No items in buffer initially
    pthread_mutex_init(&mutex, NULL);

    // Create producer and consumer threads
    pthread_create(&prodThread, NULL, producer, NULL);
    pthread_create(&consThread, NULL, consumer, NULL);

    // Wait for both threads to finish
    pthread_join(prodThread, NULL);
    pthread_join(consThread, NULL);

    // Destroy semaphores and mutex
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
