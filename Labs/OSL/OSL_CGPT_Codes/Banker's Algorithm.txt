#include <stdio.h>

int n, m;  // n = number of processes, m = number of resource types

// Function to check if the system is in a safe state
int isSafe(int available[], int max[][10], int allocation[][10], int need[][10]) {
    int work[10], finish[10], safeSequence[10], index = 0;

    // Initialize work = available
    for (int i = 0; i < m; i++) {
        work[i] = available[i];
    }

    // Initialize all processes as unfinished
    for (int i = 0; i < n; i++) {
        finish[i] = 0;
    }

    // Find a process that can be allocated resources
    while (index < n) {
        int found = 0;
        for (int i = 0; i < n; i++) {
            if (!finish[i]) {  // If process i is not finished
                int j;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > work[j])
                        break;  // Process i can't be allocated resources
                }

                if (j == m) {  // Process i can be allocated resources
                    for (int k = 0; k < m; k++) {
                        work[k] += allocation[i][k];  // Release resources
                    }
                    safeSequence[index++] = i;  // Add process to safe sequence
                    finish[i] = 1;
                    found = 1;
                }
            }
        }

        // If no process can be allocated resources, return unsafe
        if (!found) {
            printf("The system is not in a safe state.\n");
            return 0;
        }
    }

    // If all processes finished, print the safe sequence
    printf("The system is in a safe state.\nSafe Sequence is: ");
    for (int i = 0; i < n; i++) {
        printf("P%d ", safeSequence[i]);
    }
    printf("\n");

    return 1;
}

int main() {
    int max[10][10], allocation[10][10], need[10][10], available[10];

    // Input number of processes and resource types
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the number of resource types: ");
    scanf("%d", &m);

    // Input max matrix
    printf("Enter the maximum resources required by each process:\n");
    for (int i = 0; i < n; i++) {
        printf("For process P%d: ", i);
        for (int j = 0; j < m; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Input allocation matrix
    printf("Enter the allocated resources for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("For process P%d: ", i);
        for (int j = 0; j < m; j++) {
            scanf("%d", &allocation[i][j]);
        }
    }

    // Input available resources
    printf("Enter the available resources for each type: ");
    for (int i = 0; i < m; i++) {
        scanf("%d", &available[i]);
    }

    // Calculate the need matrix (Need = Max - Allocation)
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }

    // Print the need matrix
    printf("The need matrix is:\n");
    for (int i = 0; i < n; i++) {
        printf("P%d: ", i);
        for (int j = 0; j < m; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }

    // Check if the system is in a safe state
    isSafe(available, max, allocation, need);

    return 0;
}
