#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>

// Function to sort the array using bubble sort
void bubbleSort(int arr[], int n) {
    int i, j;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int n, i;
    pid_t pid;

    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter the elements of the array: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Sort the array in parent process
    bubbleSort(arr, n);
    printf("Parent process sorted the array.\n");

    // Create a new process using fork
    pid = fork();

    if (pid < 0) {
        printf("Fork failed.\n");
        return 1;
    }

    if (pid == 0) {
        // Child process
        printf("Child process started.\n");

        // Prepare arguments for execve
        char *args[n + 2]; // +2 for program name and NULL
        args[0] = "./reverseArray"; // The new program to be executed

        // Convert sorted array elements to strings
        for (i = 0; i < n; i++) {
            args[i + 1] = (char *)malloc(10 * sizeof(char));
            sprintf(args[i + 1], "%d", arr[i]);
        }

        // Null terminate the arguments
        args[n + 1] = NULL;

        // Execute the new program to reverse the array
        execve(args[0], args, NULL);

        // If execve fails
        perror("execve failed");
        exit(1);
    } else {
        // Parent process waits for the child process to finish
        wait(NULL);
        printf("Child process completed.\n");
    }

    return 0;
}
