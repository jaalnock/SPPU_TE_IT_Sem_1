#include <stdio.h>

void Optimal(int pages[], int n, int frames) {
    int frame[frames], page_faults = 0;
    for (int i = 0; i < frames; i++)
        frame[i] = -1; // Initialize all frames as empty

    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < frames; j++) {
            if (frame[j] == pages[i]) { // Page hit
                found = 1;
                break;
            }
        }

        if (!found) { // Page fault
            int replace_idx = -1, farthest = i + 1;
            for (int j = 0; j < frames; j++) {
                int next_use = -1;
                for (int k = i + 1; k < n; k++) {
                    if (frame[j] == pages[k]) {
                        next_use = k;
                        break;
                    }
                }
                if (next_use == -1) { // If page will not be used again
                    replace_idx = j;
                    break;
                }
                if (next_use > farthest) { // Find page used farthest in future
                    farthest = next_use;
                    replace_idx = j;
                }
            }
            if (replace_idx == -1) // If no page is found to replace, use the first empty frame
                replace_idx = 0;
            frame[replace_idx] = pages[i]; // Replace with the optimal page
            page_faults++;
        }

        printf("Frames after page %d: ", pages[i]);
        for (int k = 0; k < frames; k++) {
            if (frame[k] != -1)
                printf("%d ", frame[k]);
            else
                printf("- ");
        }
        printf("\n");
    }
    printf("Total page faults (Optimal): %d\n", page_faults);
}

int main() {
    int pages[] = {1, 3, 0, 3, 5, 6, 3}; // Example page references
    int n = sizeof(pages) / sizeof(pages[0]);
    int frames = 3; // Frame size of at least 3
    printf("Optimal Page Replacement\n");
    Optimal(pages, n, frames);
    return 0;
}
